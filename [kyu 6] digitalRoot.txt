/*


In this kata, you must create a digital root function.

A digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has two digits, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.

Here's how it works (Ruby example given):

digital_root(16)
=> 1 + 6
=> 7

digital_root(942)
=> 9 + 4 + 2
=> 15 ...
=> 1 + 5
=> 6

digital_root(132189)
=> 1 + 3 + 2 + 1 + 8 + 9
=> 24 ...
=> 2 + 4
=> 6

digital_root(493193)
=> 4 + 9 + 3 + 1 + 9 + 3
=> 29 ...
=> 2 + 9
=> 11 ...
=> 1 + 1
=> 2





*/


public class DRoot {
  public static int digital_root( int n ) {
    // ...
    if ( n >= 0 && n <= 9 ) {
      return n;
      
    } else {
    
        String s = Integer.toString( n );
        int i     = 0;
        int[] arr = new int[s.length()];
        int num   = 0;
        
        while ( s.length() > 0 ) {
        
          arr[i] = ( int ) Math.floor( Integer.parseInt( s ) / ( int ) (Math.pow( 10, s.length() -1 ) ) );
          
          s = s.substring( 1 );
          i ++;
        }
          
          for ( i = 0 ; i < arr.length; i ++ ) {
            num += arr[i];
          }
        return digital_root( num );
      }
    }
}
